// Used by the "fs" module// TBDexports = {    Stats: Stats,    close: function () {},    open: function () {},    read: function () {},    fdatasync: function () {},    fsync: function () {},    rename: function () {},    ftruncate: function () {},    mkdir: function () {},    readdir: function () {},    rmdir: rmdir,    stat: stat,    lstat: function () {},    fstat: function () {},    link: function () {},    symlink: function () {},    readlink: function () {},    unlink: function () {},    write: function () {},    chmod: function () {},    fchmod: function () {},    chown: function () {},    fchown: function () {},    utimes: function () {},    futimes: function () {},    StatWatcher: function StatWatcher() {}}function Stats(fullpath) {    this.stats = File(fullpath);    if (!this.stats.exists) {        this.stats = Folder(fullpath);    }    if (!this.stats.exists) {        throw new Error(fullpath + ' is neither a File or Folder');    }        //this.dev = 2114;    //this.ino = 48064969;    //this.mode = 33188;    //this.nlink = 1;    //this.uid = 85;    //this.gid = 100;    //this.rdev = 0;    this.size = stats.size;    //this.blksize = 4096;    //this.blocks = 8;    //this.atime = new Date('Mon, 10 Oct 2011 23:24:11 GMT');    this.mtime = stats.lastModifiedDate;    this.ctime = stats.creationDate;}Stats.prototype.isFile = function isFile() {    return stats instanceof File;};Stats.prototype.isDirectory = function isDirectory() {    return stats instanceof Folder;};Stats.prototype.isBlockDevice = function isBlockDevice() {    return false;};Stats.prototype.isCharacterDevice = function isCharacterDevice() {    return false;};Stats.prototype.isSymbolicLink = function isSymbolicLink() {    return false;};Stats.prototype.isFIFO = function isFIFO() {    return false;};Stats.prototype.isSocket = function isSocket() {    return false;};function stat(fullpath, callback) {    var stats = new Stats(fullpath);    var err;    if (callback) {        callback(err, stats);    } else {        if (err) {            throw err;        }    }}// First test using the Wakanda Folder API// may migrate to another version using the W3C Directory APIfunction rmdir(path, callback) {    var folder = Folder(path);    var error = null;    if (!folder.exists) {        error = new Error("ENOENT, no such file or directory '" + path + "'");        error.code = 'ENOENT';        error.errno = 34;    } else if (folder.children.length) {        error = new Error("ENOTEMPTY, directory not empty '" + path + "'");        error.code = 'ENOTEMPTY';        error.errno = 53;    } else if (!folder.remove()) {        error = new Error("EACCES, permission denied '" + path + "'");        error.code = 'EACCES';        error.errno = 3;    }    if (error) {        error.path = path;        error.syscall = 'rmdir';    }    if (callback) {        callback(error);    }    return error;}