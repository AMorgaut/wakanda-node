/** * @module binding(contexify) * * @experimental * * Used by the module "vm" * First goal is to be able to run node.js unit tests to check node API implementation in wakanda-node * Doesn't behave exactly like the node.js version (but doesn't behave the same between different versions of node by the way...) * Doesn't provide a real sandbox but one that is expected to be enhanced in the future (ES6 Proxy would really help) * * @see http://nodejs.org/api/vm.html **/// The binding provides a few useful primitives:// - ContextifyScript(code, { filename = "evalmachine.anonymous",//                            displayErrors = true } = {})//   with methods://   - runInThisContext({ displayErrors = true } = {})//   - runInContext(sandbox, { displayErrors = true, timeout = undefined } = {})// - makeContext(sandbox)// - isContext(sandbox)// From this we build the entire documented API.exports.ContextifyScript = ContextifyScript;exports.makeContext = makeContext;exports.isContext = isContext;/** * @warning NOT IMPLEMENTED * * @param {Object} sandbox * @return Object **/function makeContext(sandbox) {}/** * @warning NOT IMPLEMENTED * * @param (Object) sandbox * @return boolean **/function isContext(sandbox) {    return sandbox instanceof ContextifyScript;}/** * @warning NOT IMPLEMENTED * * @class ContextifyScript * * @constructor * @param {string} code * @param {Object} options **/function ContextifyScript(code, options) {    options = options || {};    options.filename = options.filename || "evalmachine.anonymous";    if (!options.hasOwnProperty('displayErrors')) {        options.displayErrors = true;    }        this.code = code;}/** * @warning NOT IMPLEMENTED * * @method runInThisContext * @param {Object} options **/ContextifyScript.prototype.runInThisContext = eval;/** * @warning NOT IMPLEMENTED * * @method runInContext * @param {Object} sandbox * @param {Object} options **/ContextifyScript.prototype.runInContext = function runInContext(sandbox, options) {    return eval('with (sandbox) {\n' + this.code + '\n}');};